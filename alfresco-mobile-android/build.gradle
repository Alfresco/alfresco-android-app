/*
 *  Copyright (C) 2005-2016 Alfresco Software Limited.
 *
 *  This file is part of Alfresco Mobile for Android.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "28.0.3"

    flavorDimensions "default"

    defaultConfig {
        applicationId APPLICATION_ID

        minSdkVersion 19
        targetSdkVersion 26
        versionCode 86
        multiDexEnabled true

        versionName VERSION_NAME

        manifestPlaceholders = [PROVIDER_AUTHORITY: PROVIDER_AUTHORITY]
        resValue "string", "account_name", ACCOUNT_ID
        resValue "string", "sync_adapter", SYNC_ADAPTER
        resValue "string", "favorites_adapter", FAVORITES_ADAPTER

        defaultPublishConfig DEFAULT_PUBLISH
        resValue "string", "oauth_api_key", OAUTH_API_KEY
        resValue "string", "oauth_api_secret", OAUTH_API_SECRET
        resValue "string", "oauth_callback", OAUTH_CALLBACK
        resValue "string", "oauth_scope", OAUTH_SCOPE
        resValue "string", "bamboo_buildnumber", BUILDNUMBER

        resValue "string", "ga_trackingId", TRACKER_ID
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {

        custom {
            //Add here your custom sign configuration
        }


        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            // Important : In case of custom application
            // Don't forget to change all values to custom debug values
            applicationIdSuffix ".debug"

            manifestPlaceholders = [PROVIDER_AUTHORITY: PROVIDER_AUTHORITY_DEBUG]
            resValue "string", "account_name", ACCOUNT_ID_DEBUG
            resValue "string", "sync_adapter", SYNC_ADAPTER_DEBUG
            resValue "string", "favorites_adapter", FAVORITES_ADAPTER_DEBUG

            resValue "string", "hockeyapp_key", HOCKEYAPP_KEY
            resValue "string", "ga_trackingId", TRACKER_ID_DEBUG
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def task = project.tasks.create("copy${variant.name.capitalize()}Apk", Copy)

                    def sourceDir = "${project.buildDir}/outputs/apk/${variant.getFlavorName()}" + "/${variant.buildType.name}/"
                    def destDir = "${project.buildDir}/outputs/apk/"
                    def apkName = output.outputFileName.replace(".apk", "-${variant.versionName}.apk")

                    println ">>>Pre-copy ${apkName}" +
                            "\nsource dir: ${sourceDir}" +
                            "\ndest dir: ${destDir}" +
                            "\napk: ${apkName}"

                    task.from file(sourceDir)
                    task.into file(destDir)
                    task.rename output.outputFileName, apkName
                    task.doFirst {
                        println ">>>Copying ${apkName}" +
                                "\nsource dir: ${sourceDir}" +
                                "\ndest dir: ${destDir}"
                    }
                    task.doLast{
                        println ">>>Copied ${apkName} with success!" +
                                "\nsource dir: ${sourceDir}" +
                                "\ndest dir: ${destDir}"

                        delete file("${project.buildDir}\\outputs\\apk\\" + variant.getFlavorName())
                    }
                    variant.getAssembleProvider().get().finalizedBy(task)
                }
            }
        }
    }


    productFlavors {
        //CUSTOM EXTENSION FLAVOR
        custom {
            //Add here custom configuration

            dependencies {
                //Add here 3rd party dependencies
            }
        }

        //PLAY STORE FLAVOR
        store {
            dependencies {
                //DEBUG BUILD TYPE
                debugImplementation project(':extensions:hockeyapp')
                debugImplementation project(':extensions:analytics')
                debugImplementation project(':extensions:tools')


                storeImplementation project(':extensions:samsung')
                storeImplementation project(':extensions:scansnap')
                storeImplementation project(':extensions:analytics')
            }
        }

        //MOBILE IRON FLAVOR
        mobileiron {
            dependencies {
                mobileironCompile project(':mdm:mobileiron')
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
    }
}

dependencies {
    //COMMON TO ALL VARIANTS
    api 'com.google.code.gson:gson:2.8.5'
    implementation 'com.android.support:multidex:1.0.3'
    api project(':platform:foundation')
}
